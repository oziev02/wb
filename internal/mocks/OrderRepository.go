// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	domain "github.com/oziev02/wb/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: orderUID
func (_m *OrderRepository) GetByID(orderUID string) (domain.Order, bool, error) {
	ret := _m.Called(orderUID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Order
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (domain.Order, bool, error)); ok {
		return rf(orderUID)
	}
	if rf, ok := ret.Get(0).(func(string) domain.Order); ok {
		r0 = rf(orderUID)
	} else {
		r0 = ret.Get(0).(domain.Order)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(orderUID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(orderUID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LoadAll provides a mock function with given fields: limit
func (_m *OrderRepository) LoadAll(limit int) ([]domain.Order, error) {
	ret := _m.Called(limit)

	if len(ret) == 0 {
		panic("no return value specified for LoadAll")
	}

	var r0 []domain.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]domain.Order, error)); ok {
		return rf(limit)
	}
	if rf, ok := ret.Get(0).(func(int) []domain.Order); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertOrder provides a mock function with given fields: o
func (_m *OrderRepository) UpsertOrder(o domain.Order) error {
	ret := _m.Called(o)

	if len(ret) == 0 {
		panic("no return value specified for UpsertOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Order) error); ok {
		r0 = rf(o)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrderRepository creates a new instance of OrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepository {
	mock := &OrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
